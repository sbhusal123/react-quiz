{"version":3,"sources":["API.tsx","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/nattu-adnan.jpg","App.styles.tsx","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bf91a6c.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n};\n\nexport type QuestionState = Question & {\n    answers: string[];\n};\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\"\n}\n\nexport const fetchQuizQuestions = async (\n    amount: number,\n    difficulty: Difficulty\n) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => ({\n        ...question,\n        answers: shuffleArray([\n            ...question.incorrect_answers,\n            question.correct_answer\n        ])\n    }));\n};\n","export const shuffleArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5);\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    text-align: center;\n    p {\n        font-size: 1rem;\n    }\n`;\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n    :hover {\n        opacity: 0.8;\n    }\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) =>\n            correct\n                ? \"linear-gradient(90deg, #56FFA4, #59BC86)\"\n                : !correct && userClicked\n                ? \"linear-gradient(90deg, #FF5656, #C16868)\"\n                : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\n        border: 3px solid #ffffff;\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n    }\n`;\n","import React from \"react\";\n// Types\nimport { AnswerObject } from \"../App\";\n// Styles\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => Number;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNr,\n    totalQuestions\n}) => (\n    <Wrapper>\n        <p className=\"number\">\n            Question: {questionNr} / {totalQuestions}\n        </p>\n        <p dangerouslySetInnerHTML={{ __html: question }}></p>\n        <div>\n            {answers.map(answer => (\n                <ButtonWrapper\n                    key={answer}\n                    correct={userAnswer?.correctAnswer === answer}\n                    userClicked={userAnswer?.answer === answer}\n                >\n                    <button\n                        disabled={userAnswer ? true : false}\n                        value={answer}\n                        onClick={callback}\n                    >\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </div>\n    </Wrapper>\n);\n\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/nattu-adnan.82265324.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImage from \"./images/nattu-adnan.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n  * {\n    font-family: 'Catamaran', sans-serif;\n    box-sizing: border-box;\n  }\n`;\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    > p {\n        color: #fff;\n    }\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n    h1 {\n        font-family: Fascinate Inline;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        font-weight: 400;\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        text-align: center;\n        margin: 20px;\n    }\n    .start,\n    .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #ffffff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n    .start {\n        max-width: 200px;\n    }\n`;\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions, Difficulty, QuestionState } from \"./API\";\n\n// Components\nimport QuestionCard from \"./components/QuestionCard\";\n// Styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n    question: string;\n    answer: string;\n    correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n    const [questions, setQuestions] = useState<QuestionState[]>([]);\n    const [number, setNumber] = useState(0);\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n    const [score, setScore] = useState(0);\n    const [gameOver, setGameOver] = useState(true);\n\n    const startTrivia = async () => {\n        setLoading(true);\n        setGameOver(false);\n\n        const newQuestions = await fetchQuizQuestions(\n            TOTAL_QUESTIONS,\n            Difficulty.EASY\n        );\n\n        setQuestions(newQuestions);\n        setScore(0);\n        setUserAnswers([]);\n        setNumber(0);\n        setLoading(false);\n    };\n\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (!gameOver) {\n            // users answer\n            const answer = e.currentTarget.value;\n            // Check answer against the correct answer\n            const correct = questions[number].correct_answer === answer;\n            // Add score if answer is correct\n            if (correct) {\n                setScore(prev => prev + 1);\n            }\n\n            // Save answer in the array for userAswer\n            const answerObject = {\n                question: questions[number].question,\n                answer,\n                correct,\n                correctAnswer: questions[number].correct_answer\n            };\n            setUserAnswers(prev => [...prev, answerObject]);\n        }\n    };\n    const nextQuestion = () => {\n        // Move on to next question if not the last question\n        const nextQuestion = number + 1;\n        if (nextQuestion === TOTAL_QUESTIONS) {\n            setGameOver(true);\n        } else {\n            setNumber(nextQuestion);\n        }\n    };\n\n    return (\n        <>\n            <GlobalStyle />\n            <Wrapper>\n                <h1>REACT QUIZ</h1>\n\n                {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n                    <button className=\"start\" onClick={startTrivia}>\n                        Start\n                    </button>\n                ) : null}\n\n                {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n\n                {loading && <p>Loading Questions ...</p>}\n\n                {!loading && !gameOver && (\n                    <QuestionCard\n                        questionNr={number + 1}\n                        totalQuestions={TOTAL_QUESTIONS}\n                        question={questions[number].question}\n                        answers={questions[number].answers}\n                        userAnswer={\n                            userAnswers ? userAnswers[number] : undefined\n                        }\n                        callback={checkAnswer}\n                    />\n                )}\n\n                {!gameOver &&\n                !loading &&\n                userAnswers.length === number + 1 &&\n                number !== TOTAL_QUESTIONS - 1 ? (\n                    <button className=\"next\" onClick={nextQuestion}>\n                        Next Question\n                    </button>\n                ) : null}\n            </Wrapper>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}